/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	u_int t_vector_len;
	float *t_vector_val;
} t_vector;

struct suma_1_argument {
	float a;
	float b;
};
typedef struct suma_1_argument suma_1_argument;

struct resta_1_argument {
	float a;
	float b;
};
typedef struct resta_1_argument resta_1_argument;

struct multiplicacion_1_argument {
	float a;
	float b;
};
typedef struct multiplicacion_1_argument multiplicacion_1_argument;

struct division_1_argument {
	float a;
	float b;
};
typedef struct division_1_argument division_1_argument;

struct sumavectores_1_argument {
	t_vector v_1;
	t_vector v_2;
};
typedef struct sumavectores_1_argument sumavectores_1_argument;

struct productoescalarvectores_1_argument {
	t_vector v;
	float escalar;
};
typedef struct productoescalarvectores_1_argument productoescalarvectores_1_argument;

struct productovectorial_1_argument {
	t_vector v_1;
	t_vector v_2;
};
typedef struct productovectorial_1_argument productovectorial_1_argument;

struct logaritmobase_n_1_argument {
	float numero;
	float base;
};
typedef struct logaritmobase_n_1_argument logaritmobase_n_1_argument;

struct potencia_1_argument {
	float base;
	float exponente;
};
typedef struct potencia_1_argument potencia_1_argument;

#define CALCULADORA 0x20000001
#define CALCULADORA_VER 1

#if defined(__STDC__) || defined(__cplusplus)
#define SUMA 1
extern  float * suma_1(float , float , CLIENT *);
extern  float * suma_1_svc(float , float , struct svc_req *);
#define RESTA 2
extern  float * resta_1(float , float , CLIENT *);
extern  float * resta_1_svc(float , float , struct svc_req *);
#define MULTIPLICACION 3
extern  float * multiplicacion_1(float , float , CLIENT *);
extern  float * multiplicacion_1_svc(float , float , struct svc_req *);
#define DIVISION 4
extern  float * division_1(float , float , CLIENT *);
extern  float * division_1_svc(float , float , struct svc_req *);
#define SUMAVECTORES 5
extern  t_vector * sumavectores_1(t_vector , t_vector , CLIENT *);
extern  t_vector * sumavectores_1_svc(t_vector , t_vector , struct svc_req *);
#define PRODUCTOESCALARVECTORES 6
extern  t_vector * productoescalarvectores_1(t_vector , float , CLIENT *);
extern  t_vector * productoescalarvectores_1_svc(t_vector , float , struct svc_req *);
#define PRODUCTOVECTORIAL 7
extern  t_vector * productovectorial_1(t_vector , t_vector , CLIENT *);
extern  t_vector * productovectorial_1_svc(t_vector , t_vector , struct svc_req *);
#define MEDIAARITMETICA 8
extern  float * mediaaritmetica_1(t_vector , CLIENT *);
extern  float * mediaaritmetica_1_svc(t_vector , struct svc_req *);
#define FIBONACCI 9
extern  t_vector * fibonacci_1(int , CLIENT *);
extern  t_vector * fibonacci_1_svc(int , struct svc_req *);
#define FACTORIAL 10
extern  int * factorial_1(int , CLIENT *);
extern  int * factorial_1_svc(int , struct svc_req *);
#define LOGARITMOBASE_N 11
extern  float * logaritmobase_n_1(float , float , CLIENT *);
extern  float * logaritmobase_n_1_svc(float , float , struct svc_req *);
#define POTENCIA 12
extern  float * potencia_1(float , float , CLIENT *);
extern  float * potencia_1_svc(float , float , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMA 1
extern  float * suma_1();
extern  float * suma_1_svc();
#define RESTA 2
extern  float * resta_1();
extern  float * resta_1_svc();
#define MULTIPLICACION 3
extern  float * multiplicacion_1();
extern  float * multiplicacion_1_svc();
#define DIVISION 4
extern  float * division_1();
extern  float * division_1_svc();
#define SUMAVECTORES 5
extern  t_vector * sumavectores_1();
extern  t_vector * sumavectores_1_svc();
#define PRODUCTOESCALARVECTORES 6
extern  t_vector * productoescalarvectores_1();
extern  t_vector * productoescalarvectores_1_svc();
#define PRODUCTOVECTORIAL 7
extern  t_vector * productovectorial_1();
extern  t_vector * productovectorial_1_svc();
#define MEDIAARITMETICA 8
extern  float * mediaaritmetica_1();
extern  float * mediaaritmetica_1_svc();
#define FIBONACCI 9
extern  t_vector * fibonacci_1();
extern  t_vector * fibonacci_1_svc();
#define FACTORIAL 10
extern  int * factorial_1();
extern  int * factorial_1_svc();
#define LOGARITMOBASE_N 11
extern  float * logaritmobase_n_1();
extern  float * logaritmobase_n_1_svc();
#define POTENCIA 12
extern  float * potencia_1();
extern  float * potencia_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_t_vector (XDR *, t_vector*);
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_multiplicacion_1_argument (XDR *, multiplicacion_1_argument*);
extern  bool_t xdr_division_1_argument (XDR *, division_1_argument*);
extern  bool_t xdr_sumavectores_1_argument (XDR *, sumavectores_1_argument*);
extern  bool_t xdr_productoescalarvectores_1_argument (XDR *, productoescalarvectores_1_argument*);
extern  bool_t xdr_productovectorial_1_argument (XDR *, productovectorial_1_argument*);
extern  bool_t xdr_logaritmobase_n_1_argument (XDR *, logaritmobase_n_1_argument*);
extern  bool_t xdr_potencia_1_argument (XDR *, potencia_1_argument*);

#else /* K&R C */
extern bool_t xdr_t_vector ();
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_multiplicacion_1_argument ();
extern bool_t xdr_division_1_argument ();
extern bool_t xdr_sumavectores_1_argument ();
extern bool_t xdr_productoescalarvectores_1_argument ();
extern bool_t xdr_productovectorial_1_argument ();
extern bool_t xdr_logaritmobase_n_1_argument ();
extern bool_t xdr_potencia_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */

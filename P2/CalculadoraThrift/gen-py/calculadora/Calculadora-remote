#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void ping()'
  print '  i32 suma(i32 num1, i32 num2)'
  print '  i32 resta(i32 num1, i32 num2)'
  print '  double multiplicacion(double num1, double num2)'
  print '  double division(double num1, double num2)'
  print '  i32 factorial(i32 n)'
  print '  double potencia(double base, double exponente)'
  print '   sumavectores( arr1,  arr2)'
  print '   productoescalar( arr, double escalar)'
  print '   productovectorial( arr1,  arr2)'
  print '   sumamatrices( m1,  m2)'
  print '   productoescalarmatrices( m1, double escalar)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'suma':
  if len(args) != 2:
    print 'suma requires 2 args'
    sys.exit(1)
  pp.pprint(client.suma(eval(args[0]),eval(args[1]),))

elif cmd == 'resta':
  if len(args) != 2:
    print 'resta requires 2 args'
    sys.exit(1)
  pp.pprint(client.resta(eval(args[0]),eval(args[1]),))

elif cmd == 'multiplicacion':
  if len(args) != 2:
    print 'multiplicacion requires 2 args'
    sys.exit(1)
  pp.pprint(client.multiplicacion(eval(args[0]),eval(args[1]),))

elif cmd == 'division':
  if len(args) != 2:
    print 'division requires 2 args'
    sys.exit(1)
  pp.pprint(client.division(eval(args[0]),eval(args[1]),))

elif cmd == 'factorial':
  if len(args) != 1:
    print 'factorial requires 1 args'
    sys.exit(1)
  pp.pprint(client.factorial(eval(args[0]),))

elif cmd == 'potencia':
  if len(args) != 2:
    print 'potencia requires 2 args'
    sys.exit(1)
  pp.pprint(client.potencia(eval(args[0]),eval(args[1]),))

elif cmd == 'sumavectores':
  if len(args) != 2:
    print 'sumavectores requires 2 args'
    sys.exit(1)
  pp.pprint(client.sumavectores(eval(args[0]),eval(args[1]),))

elif cmd == 'productoescalar':
  if len(args) != 2:
    print 'productoescalar requires 2 args'
    sys.exit(1)
  pp.pprint(client.productoescalar(eval(args[0]),eval(args[1]),))

elif cmd == 'productovectorial':
  if len(args) != 2:
    print 'productovectorial requires 2 args'
    sys.exit(1)
  pp.pprint(client.productovectorial(eval(args[0]),eval(args[1]),))

elif cmd == 'sumamatrices':
  if len(args) != 2:
    print 'sumamatrices requires 2 args'
    sys.exit(1)
  pp.pprint(client.sumamatrices(eval(args[0]),eval(args[1]),))

elif cmd == 'productoescalarmatrices':
  if len(args) != 2:
    print 'productoescalarmatrices requires 2 args'
    sys.exit(1)
  pp.pprint(client.productoescalarmatrices(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()

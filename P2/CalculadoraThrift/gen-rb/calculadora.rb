#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'calculadora_types'

module Calculadora
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def suma(num1, num2)
      send_suma(num1, num2)
      return recv_suma()
    end

    def send_suma(num1, num2)
      send_message('suma', Suma_args, :num1 => num1, :num2 => num2)
    end

    def recv_suma()
      result = receive_message(Suma_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma failed: unknown result')
    end

    def resta(num1, num2)
      send_resta(num1, num2)
      return recv_resta()
    end

    def send_resta(num1, num2)
      send_message('resta', Resta_args, :num1 => num1, :num2 => num2)
    end

    def recv_resta()
      result = receive_message(Resta_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta failed: unknown result')
    end

    def multiplicacion(num1, num2)
      send_multiplicacion(num1, num2)
      return recv_multiplicacion()
    end

    def send_multiplicacion(num1, num2)
      send_message('multiplicacion', Multiplicacion_args, :num1 => num1, :num2 => num2)
    end

    def recv_multiplicacion()
      result = receive_message(Multiplicacion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplicacion failed: unknown result')
    end

    def division(num1, num2)
      send_division(num1, num2)
      return recv_division()
    end

    def send_division(num1, num2)
      send_message('division', Division_args, :num1 => num1, :num2 => num2)
    end

    def recv_division()
      result = receive_message(Division_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'division failed: unknown result')
    end

    def factorial(n)
      send_factorial(n)
      return recv_factorial()
    end

    def send_factorial(n)
      send_message('factorial', Factorial_args, :n => n)
    end

    def recv_factorial()
      result = receive_message(Factorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'factorial failed: unknown result')
    end

    def potencia(base, exponente)
      send_potencia(base, exponente)
      return recv_potencia()
    end

    def send_potencia(base, exponente)
      send_message('potencia', Potencia_args, :base => base, :exponente => exponente)
    end

    def recv_potencia()
      result = receive_message(Potencia_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'potencia failed: unknown result')
    end

    def sumavectores(arr1, arr2)
      send_sumavectores(arr1, arr2)
      return recv_sumavectores()
    end

    def send_sumavectores(arr1, arr2)
      send_message('sumavectores', Sumavectores_args, :arr1 => arr1, :arr2 => arr2)
    end

    def recv_sumavectores()
      result = receive_message(Sumavectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sumavectores failed: unknown result')
    end

    def productoescalar(arr, escalar)
      send_productoescalar(arr, escalar)
      return recv_productoescalar()
    end

    def send_productoescalar(arr, escalar)
      send_message('productoescalar', Productoescalar_args, :arr => arr, :escalar => escalar)
    end

    def recv_productoescalar()
      result = receive_message(Productoescalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'productoescalar failed: unknown result')
    end

    def productovectorial(arr1, arr2)
      send_productovectorial(arr1, arr2)
      return recv_productovectorial()
    end

    def send_productovectorial(arr1, arr2)
      send_message('productovectorial', Productovectorial_args, :arr1 => arr1, :arr2 => arr2)
    end

    def recv_productovectorial()
      result = receive_message(Productovectorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'productovectorial failed: unknown result')
    end

    def sumamatrices(m1, m2)
      send_sumamatrices(m1, m2)
      return recv_sumamatrices()
    end

    def send_sumamatrices(m1, m2)
      send_message('sumamatrices', Sumamatrices_args, :m1 => m1, :m2 => m2)
    end

    def recv_sumamatrices()
      result = receive_message(Sumamatrices_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sumamatrices failed: unknown result')
    end

    def productoescalarmatrices(m1, escalar)
      send_productoescalarmatrices(m1, escalar)
      return recv_productoescalarmatrices()
    end

    def send_productoescalarmatrices(m1, escalar)
      send_message('productoescalarmatrices', Productoescalarmatrices_args, :m1 => m1, :escalar => escalar)
    end

    def recv_productoescalarmatrices()
      result = receive_message(Productoescalarmatrices_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'productoescalarmatrices failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_suma(seqid, iprot, oprot)
      args = read_args(iprot, Suma_args)
      result = Suma_result.new()
      result.success = @handler.suma(args.num1, args.num2)
      write_result(result, oprot, 'suma', seqid)
    end

    def process_resta(seqid, iprot, oprot)
      args = read_args(iprot, Resta_args)
      result = Resta_result.new()
      result.success = @handler.resta(args.num1, args.num2)
      write_result(result, oprot, 'resta', seqid)
    end

    def process_multiplicacion(seqid, iprot, oprot)
      args = read_args(iprot, Multiplicacion_args)
      result = Multiplicacion_result.new()
      result.success = @handler.multiplicacion(args.num1, args.num2)
      write_result(result, oprot, 'multiplicacion', seqid)
    end

    def process_division(seqid, iprot, oprot)
      args = read_args(iprot, Division_args)
      result = Division_result.new()
      result.success = @handler.division(args.num1, args.num2)
      write_result(result, oprot, 'division', seqid)
    end

    def process_factorial(seqid, iprot, oprot)
      args = read_args(iprot, Factorial_args)
      result = Factorial_result.new()
      result.success = @handler.factorial(args.n)
      write_result(result, oprot, 'factorial', seqid)
    end

    def process_potencia(seqid, iprot, oprot)
      args = read_args(iprot, Potencia_args)
      result = Potencia_result.new()
      result.success = @handler.potencia(args.base, args.exponente)
      write_result(result, oprot, 'potencia', seqid)
    end

    def process_sumavectores(seqid, iprot, oprot)
      args = read_args(iprot, Sumavectores_args)
      result = Sumavectores_result.new()
      result.success = @handler.sumavectores(args.arr1, args.arr2)
      write_result(result, oprot, 'sumavectores', seqid)
    end

    def process_productoescalar(seqid, iprot, oprot)
      args = read_args(iprot, Productoescalar_args)
      result = Productoescalar_result.new()
      result.success = @handler.productoescalar(args.arr, args.escalar)
      write_result(result, oprot, 'productoescalar', seqid)
    end

    def process_productovectorial(seqid, iprot, oprot)
      args = read_args(iprot, Productovectorial_args)
      result = Productovectorial_result.new()
      result.success = @handler.productovectorial(args.arr1, args.arr2)
      write_result(result, oprot, 'productovectorial', seqid)
    end

    def process_sumamatrices(seqid, iprot, oprot)
      args = read_args(iprot, Sumamatrices_args)
      result = Sumamatrices_result.new()
      result.success = @handler.sumamatrices(args.m1, args.m2)
      write_result(result, oprot, 'sumamatrices', seqid)
    end

    def process_productoescalarmatrices(seqid, iprot, oprot)
      args = read_args(iprot, Productoescalarmatrices_args)
      result = Productoescalarmatrices_result.new()
      result.success = @handler.productoescalarmatrices(args.m1, args.escalar)
      write_result(result, oprot, 'productoescalarmatrices', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Factorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    N = 1

    FIELDS = {
      N => {:type => ::Thrift::Types::I32, :name => 'n'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Factorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Potencia_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    BASE = 1
    EXPONENTE = 2

    FIELDS = {
      BASE => {:type => ::Thrift::Types::DOUBLE, :name => 'base'},
      EXPONENTE => {:type => ::Thrift::Types::DOUBLE, :name => 'exponente'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Potencia_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sumavectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ARR1 = 1
    ARR2 = 2

    FIELDS = {
      ARR1 => {:type => ::Thrift::Types::LIST, :name => 'arr1', :element => {:type => ::Thrift::Types::DOUBLE}},
      ARR2 => {:type => ::Thrift::Types::LIST, :name => 'arr2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sumavectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Productoescalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ARR = 1
    ESCALAR = 2

    FIELDS = {
      ARR => {:type => ::Thrift::Types::LIST, :name => 'arr', :element => {:type => ::Thrift::Types::DOUBLE}},
      ESCALAR => {:type => ::Thrift::Types::DOUBLE, :name => 'escalar'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Productoescalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Productovectorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ARR1 = 1
    ARR2 = 2

    FIELDS = {
      ARR1 => {:type => ::Thrift::Types::LIST, :name => 'arr1', :element => {:type => ::Thrift::Types::DOUBLE}},
      ARR2 => {:type => ::Thrift::Types::LIST, :name => 'arr2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Productovectorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sumamatrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    M1 = 1
    M2 = 2

    FIELDS = {
      M1 => {:type => ::Thrift::Types::LIST, :name => 'm1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      M2 => {:type => ::Thrift::Types::LIST, :name => 'm2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sumamatrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Productoescalarmatrices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    M1 = 1
    ESCALAR = 2

    FIELDS = {
      M1 => {:type => ::Thrift::Types::LIST, :name => 'm1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}},
      ESCALAR => {:type => ::Thrift::Types::DOUBLE, :name => 'escalar'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Productoescalarmatrices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::DOUBLE}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

